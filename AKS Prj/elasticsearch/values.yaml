# values.yaml for AKS 3-tier application (Frontend, Backend, Database)

# Frontend Configuration
frontend:
  replicaCount: 3  # Number of frontend pods to deploy
  image:
    repository: "myrepo/frontend"
    tag: "v1.0.0"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 80
    targetPort: 80
  ingress:
    enabled: true
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: "/"
    host: "frontend.myaksapp.com"  # Replace with your frontend URL
    path: "/"
    tls:
      enabled: true
      secretName: "frontend-tls-secret"  # Ensure you have a valid TLS secret for HTTPS
  resources:
    limits:
      cpu: "500m"
      memory: "512Mi"
    requests:
      cpu: "250m"
      memory: "256Mi"
  environment:
    - name: BACKEND_API_URL
      value: "http://backend-service:8080"  # URL of the backend service
    - name: DATABASE_URI
      value: "mongodb://db-service:27017"  # URL of the database service
  volume:
    enabled: false
    size: 1Gi
    storageClass: "managed-premium"

# Backend Configuration
backend:
  replicaCount: 2  # Number of backend pods to deploy
  image:
    repository: "myrepo/backend"
    tag: "v1.0.0"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 8080
    targetPort: 8080
  resources:
    limits:
      cpu: "1"
      memory: "1Gi"
    requests:
      cpu: "500m"
      memory: "512Mi"
  environment:
    - name: DATABASE_URI
      value: "mongodb://db-service:27017"  # Point to the database
    - name: BACKEND_API_KEY
      valueFrom:
        secretKeyRef:
          name: api-keys
          key: backend-api-key  # Using secret to fetch the API key
  volume:
    enabled: false
    size: 2Gi
    storageClass: "managed-premium"
  livenessProbe:
    httpGet:
      path: "/health"
      port: 8080
    initialDelaySeconds: 30
    periodSeconds: 10
  readinessProbe:
    httpGet:
      path: "/health"
      port: 8080
    initialDelaySeconds: 10
    periodSeconds: 5

# Database Configuration (MongoDB Example)
database:
  replicaCount: 1  # One replica for simplicity
  image:
    repository: "bitnami/mongodb"
    tag: "4.2.0"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 27017
    targetPort: 27017
  persistence:
    enabled: true
    size: 10Gi
    storageClass: "managed-premium"  # Ensure that AKS storage is used
  resources:
    limits:
      cpu: "500m"
      memory: "1Gi"
    requests:
      cpu: "250m"
      memory: "512Mi"
  environment:
    - name: MONGODB_ROOT_PASSWORD
      valueFrom:
        secretKeyRef:
          name: mongodb-secrets
          key: root-password  # Fetch root password from Kubernetes secret
    - name: MONGODB_USERNAME
      valueFrom:
        secretKeyRef:
          name: mongodb-secrets
          key: username  # Fetch username from Kubernetes secret
    - name: MONGODB_PASSWORD
      valueFrom:
        secretKeyRef:
          name: mongodb-secrets
          key: password  # Fetch password from Kubernetes secret
  livenessProbe:
    exec:
      command:
        - "mongo"
        - "--eval"
        - "db.stats()"
    initialDelaySeconds: 60
    periodSeconds: 30
  readinessProbe:
    exec:
      command:
        - "mongo"
        - "--eval"
        - "db.stats()"
    initialDelaySeconds: 30
    periodSeconds: 10

# Common Settings for All Tiers
common:
  namespace: "default"  # Kubernetes namespace for deployment
  imagePullSecrets: []  # Define if using a private registry
  livenessProbe:
    httpGet:
      path: "/health"
      port: 8080
    initialDelaySeconds: 30
    periodSeconds: 10
  readinessProbe:
    httpGet:
      path: "/health"
      port: 8080
    initialDelaySeconds: 10
    periodSeconds: 5
  secretManagement:
    enabled: true  # Enable secrets management for API keys, DB credentials
    apiKeySecretName: "api-keys"  # Name of the secret containing API keys
    dbSecretName: "mongodb-secrets"  # Name of the secret containing DB credentials

# Azure-specific Configurations (for AKS)
azure:
  managedIdentity: true  # Enable Managed Identity for Azure resources
  resourceGroup: "myResourceGroup"  # Azure resource group name
  region: "eastus"  # Azure region
  logAnalyticsWorkspace:
    enabled: true
    workspaceId: "your-workspace-id"  # Enable monitoring with Azure Log Analytics
  applicationGateway:
    enabled: false
    ingressControllerName: "app-gateway-ingress"

# Monitoring and Alerts (optional)
monitoring:
  enabled: true
  prometheus:
    enabled: true
    serviceMonitor:
      enabled: true
  alertmanager:
    enabled: true
    replicas: 2
  grafana:
    enabled: true
    adminPassword: "admin"
    serviceType: LoadBalancer

